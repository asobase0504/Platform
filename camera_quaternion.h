////**************************************************************************************************
////
//// カメラ処理(camera.h)
//// Author ： 唐﨑結斗
//// Author : Yuda Kaito
//// 概要 : カメラの設定処理
////
////**************************************************************************************************
//#ifndef _CAMERA_H_			// このマクロ定義がされてなかったら
//#define _CAMERA_H_			// 二重インクルード防止のマクロ定義
//
////***************************************************************************
//// インクルード
////***************************************************************************
//#include"main.h"
//
////*****************************************************************************
//// 前方宣言
////*****************************************************************************
//class CMove;
//
////=============================================================================
//// カメラクラス
//// Author : 唐﨑結斗
//// 概要 : カメラ設定を行うクラス
////=============================================================================
//class CCamera
//{
//private:
//	//--------------------------------------------------------------------
//	// 定数定義
//	//--------------------------------------------------------------------
//	static const float CAMERA_NEAR;			// ニアの最大値
//	static const float CAMERA_FUR;			// ファーの最大値
//
//public:
//	//=============================================================================
//	// 投影方法のタイプ列挙型
//	// Author : 唐﨑結斗
//	// 概要 : 投影方法の種別
//	//=============================================================================
//	enum VIEW_TYPE
//	{
//		TYPE_CLAIRVOYANCE = 0,		// 透視投影
//		TYPE_PARALLEL,				// 平行投影
//		MAX_VIEW_TYPE,				// タイプの最大数
//	};
//
//	//--------------------------------------------------------------------
//	// コンストラクタとデストラクタ
//	//--------------------------------------------------------------------
//	CCamera();
//	~CCamera();
//
//	//--------------------------------------------------------------------
//	// メンバ関数
//	//--------------------------------------------------------------------
//	HRESULT Init(void);											// 初期化
//	void Uninit(void);											// 終了
//	void Update(void);											// 更新
//	void Set(void);												// 設定
//	void SetViewType(VIEW_TYPE type) { m_viewType = type; }		// タイプの設定
//
//	//--------------------------------------------------------------------
//	// ゲッタ―
//	//--------------------------------------------------------------------
//	const D3DXVECTOR3 GetRot() { return m_rot; }					// 角度の取得
//	const D3DXVECTOR3 GetPosR() { return m_posR; }					// 注視点の取得
//	const D3DXVECTOR3 GetPosV() { return m_posV; }					// 視点の取得
//	const D3DXQUATERNION GetQuaternion() { return m_quaternion; }	// 視点角度の取得
//private:
//	//--------------------------------------------------------------------
//	// メンバ関数
//	//--------------------------------------------------------------------
//	void Rotate();	// 回転
//	void RPosRotate();	// 回転
//	void VPosRotate();	// 回転
//	void Move(void);				// 移動
//	void MouseMove(void);			// マウス移動を回転に代入
//
//	//--------------------------------------------------------------------
//	// メンバ変数
//	//--------------------------------------------------------------------
//	CMove				*m_pRoll;		// 移動クラスのインスタンス(角度)
//	D3DXQUATERNION		m_quaternion;	// クオータニオン
//	D3DXMATRIX			m_mtxWorld;		// ワールドマトリックス
//	D3DXMATRIX			m_mtxProj;		// プロジェクションマトリックス
//	D3DXMATRIX			m_mtxView;		// ビューマトリックス
//	D3DXVECTOR3			m_posV;			// 視点
//	D3DXVECTOR3			m_posR;			// 注視点
//	D3DXVECTOR3			m_vecU;			// 上方向ベクトル
//	D3DXVECTOR3			m_rot;			// 向き
//	D3DXVECTOR3			m_rotMove;		// 移動方向
//	VIEW_TYPE			m_viewType;		// 投影の種別
//	float				m_fDistance;	// 視点から注視点までの距離
//	float				m_fRotMove;		// 移動方向
//
//	D3DXVECTOR3			m_axisVec;		// 回転方向のベクトル
//	int nRotateType = -1;
//};
//#endif
